# tasks/container_deployment.yml
---
- name: Check if snapshots directory exists
  stat:
    path: "{{ selected_mount.mount }}/snapshots"
  register: snapshots_dir
  when: selected_mount is defined
  changed_when: false

- name: Fail if snapshots directory doesn't exist
  fail:
    msg: "Snapshots directory not found at {{ selected_mount.mount }}/snapshots. Please run snapshot download first."
  when: selected_mount is defined and not snapshots_dir.stat.exists

- name: Check if ETH RPC URL is provided
  fail:
    msg: "eth_rpc_url is required. Set it (e.g.) via extra-vars: -e 'eth_rpc_url=wss://...'"
  when: eth_rpc_url | default('') | trim == ''

- name: Check if Juno container is already running (exact name)
  command: docker ps --filter "name=^/juno$" -q
  register: running_containers
  ignore_errors: true
  changed_when: false

- name: Initialize container state facts
  set_fact:
    container_exists: "{{ running_containers.stdout | trim != '' }}"
    container_healthy: false
    needs_deployment: true

- name: Check Juno HTTP endpoint if container is running
  uri:
    url: http://localhost:6060
    method: GET
    timeout: 5
    return_content: false
  register: juno_http_check
  ignore_errors: true
  when: container_exists
  retries: 5
  delay: 5
  until: juno_http_check.status is defined and juno_http_check.status == 200

- name: Check Juno logs for sync signal if HTTP is responding
  command: docker logs juno --tail 50
  register: juno_logs_check
  when: container_exists and (juno_http_check.status | default(0)) == 200
  changed_when: false

- name: Update container health status
  set_fact:
    container_healthy: >-
      {{
        (juno_logs_check is defined) and (
          ('Stored block' in (juno_logs_check.stdout | default(''))) or
          ('Stored block' in (juno_logs_check.stderr | default(''))) or
          ('Stored Block' in (juno_logs_check.stdout | default(''))) or
          ('Stored Block' in (juno_logs_check.stderr | default('')))
        )
      }}
    needs_deployment: >-
      {{
        not (container_exists and
             (juno_http_check.status | default(0)) == 200 and
             (
               ('Stored block' in (juno_logs_check.stdout | default(''))) or
               ('Stored block' in (juno_logs_check.stderr | default(''))) or
               ('Stored Block' in (juno_logs_check.stdout | default(''))) or
               ('Stored Block' in (juno_logs_check.stderr | default('')))
             ))
      }}

- name: Display current Juno status
  debug:
    msg: "Juno container is running and healthy - skipping deployment"
  when: not needs_deployment

- name: Stop existing unhealthy Juno container
  command: docker stop juno
  ignore_errors: true
  when: container_exists and needs_deployment

- name: Remove existing unhealthy Juno container
  command: docker rm juno
  ignore_errors: true
  when: container_exists and needs_deployment

- name: Deploy new Juno container
  block:
    - name: Run Juno Docker container
      command: >
        docker run -d --name juno
        --restart unless-stopped
        -p 6060:6060 -p 6061:6061
        -v {{ selected_mount.mount }}/snapshots:/snapshots/juno
        nethermind/juno
        --network {{ starknet_network }}
        --http --http-port 6060 --http-host 0.0.0.0
        --ws --ws-port 6061 --ws-host 0.0.0.0
        --eth-node {{ eth_rpc_url }}
        --db-path /snapshots/juno
      register: juno_container

    - name: Display container start status
      debug:
        msg: "Juno container started with ID: {{ juno_container.stdout }}"

    - name: Wait for Juno to start
      wait_for:
        port: 6060
        host: localhost
        delay: 10
        timeout: 300

    - name: Verify Juno is responding
      uri:
        url: http://localhost:6060
        method: GET
        timeout: 10
      register: juno_health_check
      retries: 5
      delay: 10
      until: juno_health_check.status == 200

    - name: Display success message
      debug:
        msg: "Juno container deployed successfully and is responding"

  rescue:
    - name: Get container logs on failure
      command: docker logs juno --tail 200
      register: juno_logs
      ignore_errors: true
      changed_when: false

    - name: Display error logs
      debug:
        msg: "{{ (juno_logs.stdout_lines | default([])) + (juno_logs.stderr_lines | default([])) }}"

    - name: Fail deployment
      fail:
        msg: "Juno container deployment failed. See logs above."

  when: needs_deployment and selected_mount is defined

- name: Show final connection information
  debug:
    msg: |
      Juno node is running!
      HTTP endpoint: http://localhost:6060
      WebSocket endpoint: ws://localhost:6061
      Snapshots mounted from: {{ selected_mount.mount }}/snapshots
